#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<dirent.h>
#include<fcntl.h>
#include<sys/stat.h>
#include<ctype.h>

char *add = "add";
char *info_mess = "Usage: myvcs [COMMAND] FILENAME";


struct commit {
    char *id;
    char *message;
    commit *previous;
    change *changes; 
    int n_changes;
  };
  
  void *vcs_init(void) {


    commit *commit = (commit*)malloc(sizeof(commit));
    com->id = NULL;
    com->message = NULL;
    com->previous = NULL;
    com->changes = NULL; 
    com->n_changes = 0;
    HEAD = com;

    return NULL;
}


void get_id(commit *commit) {
    int id = 0;
    for(int i = 0; i < strlen(commit->message); i++) {
        id = (id + (int)(commit->message[i])) % 1000;
    }
    for(int i = 0; i < com->n_changes; i++) {
        if(!strcmp(commit->changes[i].operation, "add")) {
            id += 3252511;
        } else if(!strcmp(commit->changes[i].operation, "delete")) {
            id += 643347;
        } 
        
        for(int j = 0; j < strlen(commit->changes[i].file_name); j++) {
            id = (id * ((int)(commit->changes[i].file_name[j]) % 37)) % 88762561 + 2;
        }
    }
    commit->id = (char*)malloc(7);
}


int find_file(char *dir_name, char *file_name) {
struct dirent *dir;
DIR *fd;
fd = opendir(dir_name);
dir = readdir(fd);
while (dir) {
if (!strcmp(dir->d_name, file_name)) {
closedir(fd);
return 1;
}
dir = readdir(fd);
}
closedir(fd);
return 0;
}



void free_commit(commit *ptr) {
    if(ptr->id) {
        free(ptr->id);
        ptr->id = NULL;
    }
    if(ptr->message) {
        free(ptr->message);
        ptr->message = NULL;
    }

    if(ptr->n_changes) {
        for(int i = 0; i < ptr->n_changes; i++) {
            free(ptr->changes[i].file_name);
        }
        free(ptr->changes);
        ptr->n_changes = 0;
    }
  
    free(ptr);
}





int record_file(char *dir_name, char *file_name) {
}


void reverse(char s[]) // need for itoa(): reverse string;
{
    int i, j;
    char c;

    for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}

void itoa(int n, char s[]) { // convert int to array(string);
    int i, sign;

    if ((sign = n) < 0)  
        n = -n;         
    i = 0;
    do {      
        s[i++] = n % 10 + '0';
    } while ((n /= 10) > 0); 
    if (sign < 0)
        s[i++] = '-';
    s[i] = '\0';
    reverse(s); // use reverse()
}

int find_file(char *dirname, char *filename) { // return 1, if file was found in directory;
    DIR *dirp;
    struct dirent *d;
    dirp = opendir(dirname);
    if (!dirp) {
        perror(dirname);
        return -1;
    }
    do {
        d = readdir(dirp);
        if (d && !strcmp(d->d_name, filename)) {
            closedir(dirp);
            return 1;
        }
    } while (d);
    closedir(dirp);
    return 0;
}

int find_max(char *dirname) { // find max. file release in directory;
    DIR *dirp;
    struct dirent *d;
    int max = 0;
    dirp = opendir(dirname);
    if (!dirp) {
        perror(dirname);
        return -1;
    }
    do {
        d = readdir(dirp);
        if (d) {
            int k;
            if ((k = atoi(d->d_name)) > max)
                max = k;
        }
    } while (d);
    return max;
}

int reset_file(char *filename, int release) { // rewrite file using earlier releases;
    char path[256] = "./objects/";
    strcat(path, filename);
    strcat(path, "/");
    char rel[8];
    itoa(release, rel);
    strcat(path, rel);
    FILE *src = fopen(path, "r");
    if (!src) {
        perror(path);
        return -1;
    }
    FILE *dest = fopen(filename, "w+");
    if (!dest) {
        perror(filename);
        return -1;
    }
   int st;
   char buff[1024];
   do { // copy file
       st = fread(buff, 1, 1024, src);
       fwrite(buff, 1, st, dest);
   } while (st);
   fclose(dest);
   fclose(src);
   return 0;
}

int save_file(char *filename) { // save file
    char path[256] = "./objects/";
    strcat(path, filename);
    strcat(path, "/");
    if (!find_file("objects", filename)) { //filename in objects/ equal filename in work directory;
        int st = mkdir(path, S_IRWXU);
        if (st) {
            perror("save_file");
            return -1;
        }
    }
   char newfile[8];
   char buff[1024];
   int k = find_max(path) + 1;
   itoa(k, newfile);
   strcat(path, newfile);
   printf("after itoa debug: %s\n", path);
   FILE *dest = fopen(path, "w+");
   FILE *src = fopen(filename, "r");
   int st;
   do { // copy file
       st = fread(buff, 1, 1024, src);
       fwrite(buff, 1, st, dest);
   } while (st);
   fclose(dest);
   fclose(src);
   return 0; 
}

int main(int argc, char *argv[]) {
    if (argc == 3) {
        if (strcmp(argv[1], "add") == 0) {
            if (find_file(".", argv[2])) {
               save_file(argv[2]);
            }
            else {
                printf("%s: No such file or directory\n", argv[2]);
                return -1;
            }
        }
        else if (!strcmp(argv[1], "reset")) {
            if (find_file("objects", argv[2])) {
                int rel;
                printf("Enter release: ");
                scanf("%d", &rel);
                reset_file(argv[2], rel);
            }
            else {
                printf("%s: No such file or directory\n", argv[2]);
                return -1;
            }
        }
        else {
            puts(info_mess);
            return 1;
        }
    }
    else {
        puts(info_mess);
        return 1;
    }
    return 0;
}




